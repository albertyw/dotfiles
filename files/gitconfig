# vim: ft=dosini

# Core
[core]
    # Use neovim as the default editor for things like git commits
    editor = nvim
    # Global gitignore file
    excludesfile = ~/.gitignore
    # Copy githooks and other useful stuff into newly cloned repositories
    # TODO: this might have no effect; remove
    templatedir = ~/.git
    # Configure git attributes for certain file types
    attributesfile = ~/.dotfiles/files/gitattributes
    # https://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
    # TODO: this is probably not needed anymore; remove
    trustctime = false
    # Use less to do paging
    pager = "less --tabs=4"
    # Make file names be handled transparently by Git on Mac OS
    precomposeunicode = false
    # Use a cache to determine untracked files for git status
    untrackedCache = true
    # Use a filesystem monitor to detect changes
    # TODO: this seems to slow down small repositories.  Maybe only enable for large repositories
    # fsmonitor = true
    # Use global git hooks
    hooksPath = "~/.dotfiles/files/git-hooks"

[fetch]
    # Update the git commit graph when fetching
    writeCommitGraph = true
    # Prune branches when fetching
    prune = true
    # Parallel fetching (chooses a "reasonable default")
    parallel = 0

[transfer]
    # Check objects when fetching or receiving
    fsckobjects = true

[help]
    # Auto-correct typos in git commands with a 0.1 second delay
    autocorrect = 1

[advice]
    skippedCherryPicks = false

[submodule]
    # Parallel fetching (chooses a "reasonable default")
    fetchJobs = 0

[pack]
    threads = 0

[user]
    # Set the name used for git commits
    name = Albert Wang
    # Set the email used for git commits
    email = git@albertyw.com

[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f

# Git command Configuration
[alias]
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'
    lg-notags = log --graph --pretty=format:'%Cred%h%Creset - %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'
    s = status -uno
    todo = grep -n -e TODO -e FIXME -e XXX -e OPTIMIZE -e FIX-ME
    loc = !git diff --stat `git hash-object -t tree /dev/null` | tail -1 | cut -d' ' -f5
    cherrypick = cherry-pick
    blame = blame -cwC
    branches = branch -vv
    find = !~/.dotfiles/scripts/git/find
    browse = !~/.dotfiles/scripts/git/git-browse/git_browse/browse.py --path=${GIT_PREFIX:-./}
    reviewers = !~/.dotfiles/scripts/git/git-reviewers/git_reviewers/reviewers.py -i albertyw -c -j ~/.gitreviewers.json
    size = !~/.dotfiles/scripts/git/size
    userstats = !~/.dotfiles/scripts/git/userstats
    findreplace = !~/.dotfiles/scripts/git/findreplace
    finddelete = !~/.dotfiles/scripts/git/finddelete

[grep]
    # Show line numbers when using git grep
    linenumber = true

[blame]
    date = local

[log]
    abbrevCommit = true
    date = local
    # Follow file renames when running git log on a file
    follow = true

[status]
    submoduleSummary = true

[push]
    default = current


# Branching/Merging
[branch]
    autosetuprebase = always
    # Sort branches by committer date instead of alphabetical
    sort = committerdate

[pull]
    rebase = true

[rebase]
    # Automatically stash and unstash changes when rebasing or pulling
    # https://cscheng.info/2017/01/26/git-tip-autostash-with-git-pull-rebase.html
    autoStash = true
    updateRefs = true

[diff]
    algorithm = histogram
    tool = vimdiff
    indentHeuristic = true
    renames = copies
    renameLimit = 1000
    submodule = log
    colorMoved = default
    colorMovedWS = allow-indentation-change

[difftool]
    prompt = false


[merge]
    conflictstyle = diff3
    # TODO: switch to zdiff3 after ubuntu updates to >2.35.0
    # conflictstyle = zdiff3
    log = true

[rerere]
    # Use "reuse recorded resolution", which will remember git rebase conflict resolutions so they will be reapplied for future conficts
    # https://git-scm.com/book/en/v2/Git-Tools-Rerere
    enabled = true

[apply]
    whitespace = fix

# Colors
[color]
    # Ensure git output is colored.
    ui = true

[color "grep"]
    filename = magenta
    match = bold red
    linenumber = bold blue

[color "diff"]
    meta = bold cyan

[url "ssh://git@github.com/"]
    # Use an alias for git remote
    insteadOf = https://github.com/

[init]
    # Initialize new repositories with branch name "master"
    defaultBranch = master

# Overrides
# This must go at the bottom in order to override configs above
[include]
    # Override gitconfig from ~/.gitconfig_local
    path = .gitconfig_local
