{"name":"linter","main":"./lib/init","version":"0.12.0","private":true,"description":"Validates your code using linters.","repository":{"type":"git","url":"https://github.com/AtomLinter/Linter.git"},"license":"MIT","engines":{"atom":">=0.175.0","node":">= 0.10.0"},"dependencies":{"chai":"^1.9.1","emissary":"^1.0.0","jshint":"^2.4.4","lodash":"^2.4.1","rimraf":"^2.2.8","shelljs":"^0.2.6","sinon":"^1.10.0","space-pen":"^4.3.3","temp":"~0.8.0","xregexp":"2.0.0"},"devDependencies":{"biscotto":"^2.1.1","grunt":"^0.4.5","grunt-coffeelint":"^0.0.10","grunt-contrib-clean":"^0.5.0","grunt-contrib-coffee":"^0.10.1","grunt-contrib-connect":"^0.7.1","grunt-contrib-watch":"^0.5.3","grunt-exec":"^0.4.5","grunt-gh-pages":"^0.9.1","grunt-lesslint":"^1.1.3","grunt-lintspaces":"^0.5.1","load-grunt-tasks":"^0.4.0","pygments":"^0.2.0"},"readme":"# Linter\n\n[![Gitter](https://img.shields.io/badge/gitter-join%20chat-1dce73.svg?style=flat)](https://gitter.im/AtomLinter/Linter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://img.shields.io/travis/AtomLinter/Linter.svg?style=flat)](https://travis-ci.org/AtomLinter/Linter)\n\nLint your code with ease in [Atom](http://atom.io).\n\n![atom-inline-messages](https://raw.githubusercontent.com/AtomLinter/Linter/master/inline-comments.gif)\n\nThe idea is to stop the linter plugins war, by providing a top level API for linters to parse and display errors in the Atom editor.\n\n## Available linters\n#### for JavaScript\n- [linter-jshint](https://atom.io/packages/linter-jshint), for JavaScript and JSON, using `jshint`\n- [linter-jscs](https://atom.io/packages/linter-jscs), for JavaScript, using `jscs`\n- [linter-jsxhint](https://atom.io/packages/linter-jsxhint), for JSX (React.js), using `jsxhint`\n- [linter-eslint](https://atom.io/packages/linter-eslint), for JavaScript, using `eslint`\n- [linter-gjslint](https://atom.io/packages/linter-gjslint), for JavaScript, using `gjslint`\n- [linter-flow](https://atom.io/packages/linter-flow), for JavaScript, using `flow`\n\n#### for CoffeeScript\n- [linter-coffeelint](https://atom.io/packages/linter-coffeelint), for CoffeeScript, using `coffeelint`\n\n#### for Typescript\n- [linter-tslint](https://atom.io/packages/linter-tslint), for Typescript, using `tslint`\n\n#### for Dart\n- [linter-dartanalyzer](https://atom.io/packages/linter-dartanalyzer), for Dart using `dartanalyzer`\n\n#### for LiveScript\n- [linter-lsc](https://atom.io/packages/linter-lsc), for LiveScript, using `lsc -a`\n\n#### for Ruby and Ruby on Rails\n- [linter-rubocop](https://atom.io/packages/linter-rubocop), for Ruby and Ruby on Rails, using `rubocop`\n- [linter-ruby](https://atom.io/packages/linter-ruby), for Ruby, using `ruby -wc`\n- [linter-erb](https://atom.io/packages/linter-erb), for .erb files, using `erb -x`\n- [linter-haml](https://atom.io/packages/linter-haml), for .haml files, using `haml-lint`\n\n#### for PHP\n- [linter-php](https://atom.io/packages/linter-php), for PHP using `php -l`\n- [linter-phpcs](https://atom.io/packages/linter-phpcs), for PHP, using `phpc`\n- [linter-phpmd](https://atom.io/packages/linter-phpmd), for PHP, using `phpmd`\n\n#### for Python\n- [linter-pylint](https://atom.io/packages/linter-pylint), for Python, using `pylint`\n- [linter-pyflakes](https://atom.io/packages/linter-pyflakes), for Python, using `pyflakes`\n- [linter-pep8](https://atom.io/packages/linter-pep8), for Python, using `pep8`.\n- [linter-pep257](https://atom.io/packages/linter-pep257), for Python, using `pep257`\n- [linter-flake8](https://atom.io/packages/linter-flake8), for Python, using `flake8`\n- [linter-pylama](https://atom.io/packages/linter-pylama), for Python, using `pylama`\n\n#### for Java\n- [linter-javac](https://atom.io/packages/linter-javac), for Java, using `javac`\n\n#### for CSS / SASS / SCSS / LESS\n- [linter-scss-lint](https://atom.io/packages/linter-scss-lint), for SASS/SCSS, using `scss-lint`\n- [linter-less](https://atom.io/packages/linter-less), for LESS, using `less`\n- [linter-csslint](https://atom.io/packages/linter-csslint), for CSS, using `csslint`\n\n#### for XML\n- [linter-xmllint](https://atom.io/packages/linter-xmllint), for XML, using `xmllint`\n\n#### for Bash\n- [linter-shellcheck](https://atom.io/packages/linter-shellcheck), for Bash, using `shellcheck`\n\n#### for Scala\n- [linter-scalac](https://atom.io/packages/linter-scalac), for Scala, using `scalac`\n\n#### for C / C++\n- [linter-clang](https://atom.io/packages/linter-clang), for C / C++, using `clang`\n- [linter-cpplint](https://atom.io/packages/linter-cpplint), for C++, using `cpplint`\n\n#### for Lua\n- [linter-lua](https://atom.io/packages/linter-lua), for Lua, using `luac -p`\n- [linter-luacheck](https://atom.io/packages/linter-luacheck) for Lua, using `luacheck`\n\n#### for Clojure\n- [linter-clojure](https://atom.io/packages/linter-clojure), for Clojure, using `clojure`\n\n#### for Puppet\n- [linter-puppet-lint](https://atom.io/packages/linter-puppet-lint), for Puppet, using `puppet-lint`\n\n#### for Yaml\n- [linter-js-yaml](https://atom.io/packages/linter-js-yaml), for Yaml, using `js-yaml`\n\n#### for Haskell\n- [linter-hlint](https://atom.io/packages/linter-hlint), for Haskell files, using `hlint`\n\n#### for HTML / Bootstrap\n- [linter-bootlint](https://atom.io/packages/linter-bootlint), for Bootstrap HTML, using `bootlint`\n- [linter-tidy](https://atom.io/packages/linter-tidy), for HTML, using `tidy`\n- [linter-htmlhint](https://atom.io/packages/linter-htmlhint), for html, using `htmlhint`\n\n#### for Squirrel\n- [linter-squirrel](https://atom.io/packages/linter-squirrel), for squirrel, using `squirrel-compiler`\n\n#### for CoDScript\n- [linter-codscriptizer](https://atom.io/packages/linter-codscriptizer), for CoDScript, using `codscriptizer -l`\n\n#### for harbour\n- [linter-harbour](https://atom.io/packages/linter-harbour), for Harbour, using `harbour`\n\n#### for Rust\n- [linter-rust](https://atom.io/packages/linter-rust), for Rust, using `rustc`\n\n#### for Elixir\n- [linter-elixirc](https://atom.io/packages/linter-elixirc), for Elixir, using `elixirc`\n\n#### for Erlang\n- [linter-erlc](https://atom.io/packages/linter-erlc), for Erlang, using `erlc`\n\n#### for ActionScript/Flash/Flex/AIR\n- [linter-flexpmd](https://atom.io/packages/linter-flexpmd),for ActionScript/Flash/Flex/AIR, using flexpmd\n\n## Features\n\n* **Lint on edit** – Instant error reporting for you! (And it's fast!)\n* **Modular** – You install only the linters you need.\n* **Active** – New linters are out every week.\n\n## Installation\n\n1. `$ apm install linter` – Install the main package.\n2. `$ apm install linter-jshint` – Install the linter you need, here `jshint`.\n\n## Configuration\n\n* **Lint on save** [On / Off] - Lint the file when you save it\n* **Lint on change** [On / Off] - Lint the file as you type\n* **Show highlighting** [On / Off] - Highlight the range of wrong code\n* **Show gutters**: [On / Off] - Show dot in the gutter on line error\n* **Show messages around cursor** [On / Off] - Show error description in the status bar\n* **Show status bar when cursor is in error range** [On / Off] - Either show status bar when the cursor is on the error line, or show it when the cursor is focus the range of wrong code\n* **Show error inline** [On / Off] - Shows the error or warning message next to the code as opposed to in the status bar.\n* **Lint on change interval** [in ms] - Interval between two lints while you are writing code\n\n## Common errors\n\n* `npm ERR! code ENOGIT` - You need to install git before installing linter. See [#114](https://github.com/AtomLinter/Linter/issues/102).\n* `env: node: No such file or directory` – There's a problem with your node path – [check this](http://stackoverflow.com/a/20077620).\n* `spawn ENOENT` or `spawn ENOTDIR` - A linter can't find a path to the executable. Try starting Atom from a shell via `atom` to make sure it gets your `PATH`. See also [#102](https://github.com/AtomLinter/Linter/issues/102), [#150](https://github.com/AtomLinter/Linter/issues/150).\n\n## Documentation\nhttp://atomlinter.github.io/Linter/\n\n## Coming soon\n\n- linter-pep257, for python, using `pep257`.\n- linter-rst, for reStructuredText, using `docutils`.\n- linter-phplint, for PHP, using `phplint`.\n- linter-jsl, for JavaScript, using `jsl`.\n- linter-oclitnt, for C / C++ / Objective-C, using `OCLint`.\n\n## Contributing\n\nIf you're going to submit a pull request, please try to follow\n[the official contribution guidelines of Atom](https://atom.io/docs/latest/contributing).\n\nYou need `nodejs` and `grunt-cli` installed before contributing.\nRun `bower install node` then `npm install -g grunt-cli`.\n\nAlso, run `$ grunt dev` before any submission and while developing, it will achieves severals tasks:\n\n* Compile and lint the CoffeeScript files\n* Lint the stylesheets\n* Lint any trailing spaces and ensure new line at end of file\n\nYou can generate the doc with `$ grunt doc`, it will open in your default browser.\n\n## Donation\n[![Share the love!](https://chewbacco-stuff.s3.amazonaws.com/donate.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=KXUYS4ARNHCN8)\n\n[![donate-paypal](https://s3-eu-west-1.amazonaws.com/chewbacco-stuff/donate-paypal.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=KXUYS4ARNHCN8)\n\n<a class=\"coinbase-button\" data-code=\"2945dab392cb1cefbb7097e4cd17a603\" data-button-style=\"custom_small\" href=\"https://www.coinbase.com/checkouts/2945dab392cb1cefbb7097e4cd17a603\">Donate Bitcoins</a><script src=\"https://www.coinbase.com/assets/button.js\" type=\"text/javascript\"></script>\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/AtomLinter/Linter/issues"},"homepage":"https://github.com/AtomLinter/Linter","_id":"linter@0.12.0","_shasum":"b812198e9b4b5ed908c13340eadf0a2bd5e23555","_resolved":"file:../d-115219-10200-wmojsn/package.tgz","_from":"../d-115219-10200-wmojsn/package.tgz"}